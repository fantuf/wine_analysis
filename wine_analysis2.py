# -*- coding: utf-8 -*-
"""Wine_analysis2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kg-80Retb3BJ13dRJDRPpiyAKujlr9Vx

Interactive visualization - Wine analysis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import streamlit as st

df = pd.read_csv('wine_data.csv')
print(df.head())

"""The dataset describe wine characteristics, including several chemical and physical properties such as **fixed acidity**, **volatile acidity**, **citric acid**, **residual sugar**, **chlorides**, **sulfur dioxide levels**, **density**, **pH**, **sulphates**, and **alcohol**. Additionally, it includes a **quality** score, likely representing the wine's rating or classification. This data is suitable for wine quality analysis or predictive modeling.

### Analysis Plan

I will analyze wine **quality** using two features: **pH** and **total_sulfur_dioxide**. These features were chosen based on their importance in wine chemistry and potential impact on quality:

1. **pH**:  
   - Represents the acidity of the wine, a key factor in flavor and preservation.  
   - Wines with balanced pH levels often have better taste and longevity, making this feature a critical determinant of quality.

2. **Total Sulfur Dioxide**:  
   - Measures the level of sulfur dioxide, a common preservative in wine.  
   - Excessive sulfur dioxide can negatively affect aroma and taste, while insufficient levels may lead to spoilage.  

By analyzing these features, I aim to understand how acidity and sulfur dioxide levels influence wine quality, providing insights into factors that enhance or diminish the sensory appeal of wines.
"""

new_data = df[['total_sulfur_dioxide', 'pH', 'quality']]
print(new_data.head())

"""### Data Reduction

I have reduced the length of the **quality** column by sampling an equal number of rows for each quality value. This step ensures a balanced dataset while simplifying computations, making the analysis more efficient and less resource-intensive. Rows with fewer occurrences were retained as-is to preserve their representation.

"""

# Assuming 'df' is your DataFrame and 'quality' is the column name
quality_counts = df['quality'].value_counts()
print(quality_counts)

# To get the total number of quality values:
total_quality_values = len(df['quality'])
print(f"\nTotal number of quality values: {total_quality_values}")

# Reduce the dataset while maintaining equal representation of each quality value
reduced_df = pd.DataFrame()
target_count = 200 #example: 200 of 3, 200 of 4

for quality_value in quality_counts.index:
  quality_subset = df[df['quality'] == quality_value]
  if len(quality_subset) >= target_count:
    sampled_subset = quality_subset.sample(n=target_count, random_state=42) #random state for reproducibility
  else:
      sampled_subset = quality_subset # Keep all rows if less than target_count
  reduced_df = pd.concat([reduced_df, sampled_subset])

new_data = reduced_df[['total_sulfur_dioxide', 'pH', 'quality']]
print(new_data.head())
print(new_data['quality'].value_counts())

# prompt: make me some analysis of the interactive graph above

import plotly.express as px

# Assuming 'new_data' DataFrame is already created as in your previous code
# ... (your existing code to create new_data) ...

fig = px.scatter_3d(
    new_data,
    x='total_sulfur_dioxide',
    y='pH',
    z='quality',
    color='quality',
    title='Wine Quality based on Total Sulfur Dioxide and pH',
    labels={'total_sulfur_dioxide': 'Total Sulfur Dioxide', 'pH': 'pH', 'quality': 'Quality'},
    opacity=0.7
)

fig.update_layout(
    scene=dict(
        xaxis_title='Total Sulfur Dioxide',
        yaxis_title='pH',
        zaxis_title='Quality'
    ),
    margin=dict(l=0, r=0, b=0, t=40),  # Adjust margins to maximize space
    height=700,  # Increase the height of the figure
    width=1200   # Increase the width of the figure
)

fig.update_traces(marker=dict(size=3))  # Adjust marker size if needed
fig.show()
st.plotly_chart(fig)

"""The interactive 3D scatter plot visualizes the relationship between wine quality, total sulfur dioxide, and pH.  Each point represents a wine sample, colored by its quality rating.  The plot allows for interactive exploration of how these variables relate to one another.

Key observations (potential observations depending on the data):

* **Clusters by Quality:**  Observe if wines of different quality ratings cluster in distinct regions of the plot.  This would suggest that total sulfur dioxide and pH levels are indicative of quality. Look for separations along the z-axis (quality).
* **Influence of Sulfur Dioxide:** Examine the distribution of points along the x-axis (total sulfur dioxide).  Do higher or lower sulfur dioxide levels appear to correlate with specific quality ratings?  Look for trends in point density or clustering in relation to the sulfur dioxide levels.
* **Influence of pH:**  Similarly, analyze the distribution along the y-axis (pH). Are certain pH ranges associated with particular quality scores?  Look for trends in the point density with regards to the pH.
* **Combined Effects:** Note any patterns where specific combinations of total sulfur dioxide and pH seem to predict higher or lower quality.  For example, you might see a high quality cluster at a specific pH range and sulfur dioxide concentration.  Areas with dense point clouds could indicate concentrations of wines with certain qualities.


By manipulating the plot (rotating, zooming), you can gain a better understanding of the complex interplay between these three variables.  This interactive visualization complements the statistical analysis by providing a visual representation of the data relationships.
"""
